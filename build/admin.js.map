{"version":3,"file":"admin.js","mappings":";;;;;AAAA;;AAEAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACxDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,eAAe,CAAC;EAEjD,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,OAAO,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAC7C,MAAMC,MAAM,GAAG;IACbC,IAAI,EAAE,mBAAmB;IACzBC,GAAG,EAAE,mBAAmB;IACxBC,GAAG,EAAE,mBAAmB;IACxBC,GAAG,EAAE;EACP,CAAC;EAED,SAASC,WAAWA,CAACC,MAAM,EAAE;IAC3B,MAAMC,GAAG,GAAGd,QAAQ,CAACe,cAAc,CAAC,GAAGF,MAAM,OAAO,CAAC,CAACG,UAAU,CAAC,IAAI,CAAC;IACtE,OAAO,IAAIC,KAAK,CAACH,GAAG,EAAE;MACpBI,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QACJC,MAAM,EAAEhB,eAAe,CAACgB,MAAM;QAC9BC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAET,MAAM,CAACU,WAAW,CAAC,CAAC;UAC3BJ,IAAI,EAAEf,eAAe,CAACS,MAAM,CAAC;UAC7BW,WAAW,EAAEjB,MAAM,CAACM,MAAM,CAAC;UAC3BY,eAAe,EAAElB,MAAM,CAACM,MAAM,CAAC,GAAG,IAAI;UAAE;UACxCa,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE;QACX,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,KAAK;QAC1BC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDd,IAAI,EAAE,MAAM;YACZe,IAAI,EAAE;cACJC,IAAI,EAAE,MAAM;cACZC,cAAc,EAAE;gBACdC,IAAI,EAAE;cACR;YACF,CAAC;YACDC,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACR;UACF,CAAC;UACDC,CAAC,EAAE;YACDC,WAAW,EAAE,IAAI;YACjBJ,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE1B,MAAM,KAAK,KAAK,GAAG,OAAO,GAAG;YACrC;UACF;QACF,CAAC;QACD6B,OAAO,EAAE;UACPC,MAAM,EAAE;YACNL,OAAO,EAAE;UACX;QACF;MACF;IACF,CAAC,CAAC;EACJ;EAEAhC,OAAO,CAACsC,OAAO,CAAE/B,MAAM,IAAK;IAC1BR,MAAM,CAACQ,MAAM,CAAC,GAAGD,WAAW,CAACC,MAAM,CAAC;EACtC,CAAC,CAAC;;EAEF;EACA,MAAMgC,SAAS,GAAG7C,QAAQ,CAACe,cAAc,CAAC,YAAY,CAAC;EACvD8B,SAAS,CAAC5C,gBAAgB,CAAC,QAAQ,EAAE,YAAY;IAC/C,MAAM6C,WAAW,GAAG,IAAI,CAACC,KAAK;IAC9B;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC;EAEF,SAASC,YAAYA,CAACC,OAAO,EAAE;IAC7B3C,OAAO,CAACsC,OAAO,CAAE/B,MAAM,IAAK;MAC1BR,MAAM,CAACQ,MAAM,CAAC,CAACM,IAAI,CAACC,MAAM,GAAG6B,OAAO,CAAC7B,MAAM;MAC3Cf,MAAM,CAACQ,MAAM,CAAC,CAACM,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACF,IAAI,GAAG8B,OAAO,CAACpC,MAAM,CAAC;MACtDR,MAAM,CAACQ,MAAM,CAAC,CAACqC,MAAM,CAAC,CAAC;IACzB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC,C","sources":["webpack://performance-dashboard/./assets/js/admin.js"],"sourcesContent":["// import '../css/admin.css';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('Performance Data:', performanceData);\n\n  const charts = {};\n  const metrics = ['ttfb', 'lcp', 'cls', 'inp'];\n  const colors = {\n    ttfb: 'rgb(54, 162, 235)',\n    lcp: 'rgb(255, 99, 132)',\n    cls: 'rgb(255, 206, 86)',\n    inp: 'rgb(75, 192, 192)',\n  };\n\n  function createChart(metric) {\n    const ctx = document.getElementById(`${metric}Chart`).getContext('2d');\n    return new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: performanceData.labels,\n        datasets: [\n          {\n            label: metric.toUpperCase(),\n            data: performanceData[metric],\n            borderColor: colors[metric],\n            backgroundColor: colors[metric] + '40', // 40 is for 25% opacity\n            fill: true,\n            tension: 0.4,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'hour',\n              displayFormats: {\n                hour: 'MMM d, HH:mm',\n              },\n            },\n            title: {\n              display: true,\n              text: 'Date',\n            },\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: metric === 'cls' ? 'Score' : 'Time (ms)',\n            },\n          },\n        },\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n      },\n    });\n  }\n\n  metrics.forEach((metric) => {\n    charts[metric] = createChart(metric);\n  });\n\n  // URL selector functionality\n  const urlSelect = document.getElementById('url-select');\n  urlSelect.addEventListener('change', function () {\n    const selectedUrl = this.value;\n    // Here you would fetch new data for the selected URL\n    // and then update the charts\n    // For example:\n    // fetchDataForUrl(selectedUrl).then(newData => {\n    //     updateCharts(newData);\n    // });\n  });\n\n  function updateCharts(newData) {\n    metrics.forEach((metric) => {\n      charts[metric].data.labels = newData.labels;\n      charts[metric].data.datasets[0].data = newData[metric];\n      charts[metric].update();\n    });\n  }\n});\n"],"names":["document","addEventListener","console","log","performanceData","charts","metrics","colors","ttfb","lcp","cls","inp","createChart","metric","ctx","getElementById","getContext","Chart","type","data","labels","datasets","label","toUpperCase","borderColor","backgroundColor","fill","tension","options","responsive","maintainAspectRatio","scales","x","time","unit","displayFormats","hour","title","display","text","y","beginAtZero","plugins","legend","forEach","urlSelect","selectedUrl","value","updateCharts","newData","update"],"sourceRoot":""}